server:
  port: 8120

eureka:
  client:
    service-url:
      defaultZone:  http://47.106.212.169:8761/eureka/
    enabled: true
    registerWithEureka: true
    fetchRegistry: true
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 15
    #instance-id: ${spring.application.name}:${server.port}
    prefer-ip-address: true
  healthcheck:
    enabled: true

feign:
  hystrix:
    enabled: true

spring:
  cloud:
    stream:
      binders: # 在此处配置要绑定的rabbitmq的服务信息；
        defaultRabbit: # 表示定义的名称，用于于binding整合
          type: rabbit # 消息组件类型
      bindings: # 服务的整合处理
        test_output1:
          destination: test1-exchange # 表示要使用的Exchange名称定义
          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
          binder: defaultRabbit # 设置要绑定的消息服务的具体设置
        test_output2:
          destination: test1-exchange # 表示要使用的Exchange名称定义
          content-type: application/json # 设置消息类型，本次为对象json，如果是文本则设置“text/plain”
          binder: defaultRabbit # 设置要绑定的消息服务的具体设置
      rabbit:
        bindings:
          test_output1:
            producer:
              routing-key-expression: '''addProduct.*''' # 需要用这个来指定 RoutingKey
          test_output2:
            producer:
              routing-key-expression: '''Product.*''' # 需要用这个来指定 RoutingKey

  application:
    name: frame-admin
  #环境dev，pro 用于配置获取
  profiles:
    active: dev

  redisson:
    database: 0
    password: derrick
    timeout: 3000
  #sentinel/cluster/single
    mode: single
  #连接池配置
    pool:
      max-idle: 16
      min-idle: 8
      max-active: 8
      max-wait: 3000
      conn-timeout: 3000
      so-timeout: 3000
      size: 10
  #单机配置
    single:
      address: 47.106.212.169:6379
  #redis
  redis:
    host: 47.106.212.169
    password: derrick
    port: 6379

  rabbitmq:
    host: 47.106.212.169
    port: 5672
    username: derrick
    password: derrick
    virtual-host: my_vhost
# 改为使用spring cloud stream 集成，此方式备用
#    publisher-confirms: true
#    publisher-returns: true
#    listener:
#      simple:
#        acknowledge-mode: manual
#        retry:
#          enabled: true



#-------------------sharding-jdbc  读写分离（实现），分库分表
sharding.jdbc:
  data-sources:
    ds_master:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://47.106.212.169:3306/frame-admin?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: root
      password: root
    ds_slave_0:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://47.106.212.169:3307/frame-admin?useUnicode=true&characterEncoding=utf-8&useSSL=false
      username: slave
      password: slave
  master-slave-rule:
    name: ds_ms
    master-data-source-name: ds_master
    slave-data-source-names: ds_slave_0
    load-balance-algorithm-type: round_robin

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.frame.admin.web.entity
  global-config:
    db-config:
      column-like : true
      #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: 1
      #驼峰下划线转换
      #db-column-underline: true
      logic-delete-value: 1
      logic-not-delete-value: 0
      db-type: mysql
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    # jdbc-type-for-null: null

pagehelper:
  helperDialect: mysql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql




#日志配置文件
logging:
  config: classpath:logConfig/logback-dev.xml
